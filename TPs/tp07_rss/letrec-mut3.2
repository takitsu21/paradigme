#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 8.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 34 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 79
(1
 #"((lib \"srcloc-snip.rkt\" \"framework\") (lib \"wxme-srcloc-snip.rkt"
 #"\" \"framework\"))\x00"
) 1 0 93
(2
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(3
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(4
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 68 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 17 #"DejaVu Sans Mono\0"
0 11 92 -1 90 -1 1 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 90 -1 90 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1 1 1 255 0 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 238 70 74 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 149 149 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 149 149 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 90 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1 1 1 255 0 128 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 92 -1 90 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1 1 1 255 0 128 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 255 128 0 0 0 -1
-1 2 39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 255 128 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1 1 1 128 128 128 0 0 0 -1
-1 2 42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1 1 1 128 128 128 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 64 255 255 0 0 0 -1
-1 2 36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 64 255 255 0 0 0 -1
-1 2 16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
48 #"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 0 0 0 -1 -1 0
42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 18 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
28 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
32 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
54 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
55 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 1657 0 18 3 32 #"; Cours 07 : letrec par mutation"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 32 3 6 #"#lang "
0 0 54 3 5 #"plait"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 24 #";;;;;;;;;;;;;;;;;;;;;;;;"
0 0 54 29 1 #"\n"
0 0 54 3 25 #"; D\303\251finition des types ;"
0 0 54 29 1 #"\n"
0 0 54 3 24 #";;;;;;;;;;;;;;;;;;;;;;;;"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 33 #"; Repr\303\251sentation des expressions"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 11 #"define-type"
0 0 54 3 4 #" Exp"
0 0 54 29 1 #"\n"
0 0 54 3 11 #"  [numE (n "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 6 #"Number"
0 0 54 3 2 #")]"
0 0 54 29 1 #"\n"
0 0 54 3 10 #"  [idE (s "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 6 #"Symbol"
0 0 54 3 2 #")]"
0 0 54 29 1 #"\n"
0 0 54 3 12 #"  [plusE (l "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 3 #"Exp"
0 0 54 3 5 #") (r "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 3 #"Exp"
0 0 54 3 2 #")]"
0 0 54 29 1 #"\n"
0 0 54 3 12 #"  [multE (l "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 3 #"Exp"
0 0 54 3 5 #") (r "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 3 #"Exp"
0 0 54 3 2 #")]"
0 0 54 29 1 #"\n"
0 0 54 3 14 #"  [letrecE (s "
0 0 54 3 1 #":"
0 0 54 3 2 #" ("
0 0 54 3 6 #"Listof"
0 0 54 3 1 #" "
0 0 54 3 6 #"Symbol"
0 0 54 3 8 #")) (rhs "
0 0 54 3 1 #":"
0 0 54 3 2 #" ("
0 0 54 3 6 #"Listof"
0 0 54 3 1 #" "
0 0 54 3 3 #"Exp"
0 0 54 3 9 #")) (body "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 3 #"Exp"
0 0 54 3 2 #")]"
0 0 54 29 1 #"\n"
0 0 54 3 12 #"  [ifE (cnd "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 3 #"Exp"
0 0 54 3 5 #") (l "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 3 #"Exp"
0 0 54 3 5 #") (r "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 3 #"Exp"
0 0 54 3 2 #")]"
0 0 54 29 1 #"\n"
0 0 54 3 13 #"  [lamE (par "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 6 #"Symbol"
0 0 54 3 8 #") (body "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 3 #"Exp"
0 0 54 3 2 #")]"
0 0 54 29 1 #"\n"
0 0 54 3 13 #"  [appE (fun "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 3 #"Exp"
0 0 54 3 7 #") (arg "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 3 #"Exp"
0 0 54 3 2 #")]"
0 0 54 29 1 #"\n"
0 0 54 3 14 #"  [pairE (fst "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 3 #"Exp"
0 0 54 3 7 #") (snd "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 3 #"Exp"
0 0 54 3 2 #")]"
0 0 54 29 1 #"\n"
0 0 54 3 15 #"  [fstE  (body "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 3 #"Exp"
0 0 54 3 2 #")]"
0 0 54 29 1 #"\n"
0 0 54 3 14 #"  [sndE (body "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 3 #"Exp"
0 0 54 3 3 #")])"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 29 #"; Repr\303\251sentation des valeurs"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 11 #"define-type"
0 0 54 3 6 #" Value"
0 0 54 29 1 #"\n"
0 0 54 3 11 #"  [numV (n "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 6 #"Number"
0 0 54 3 2 #")]"
0 0 54 29 1 #"\n"
0 0 54 3 14 #"  [closV (arg "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 6 #"Symbol"
0 0 54 3 8 #") (body "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 3 #"Exp"
0 0 54 3 7 #") (env "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 3 #"Env"
0 0 54 3 2 #")]"
0 0 54 29 1 #"\n"
0 0 54 3 10 #"  [undefV]"
0 0 54 29 1 #"\n"
0 0 54 3 14 #"  [pairV (fst "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 5 #"Thunk"
0 0 54 3 7 #") (snd "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 5 #"Thunk"
0 0 54 3 3 #")])"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 30 #"; Repr\303\251sentation des liaisons"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 11 #"define-type"
0 0 54 3 8 #" Binding"
0 0 54 29 1 #"\n"
0 0 54 3 14 #"  [bind (name "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 6 #"Symbol"
0 0 54 3 7 #") (val "
0 0 54 3 1 #":"
0 0 54 3 2 #" ("
0 0 54 3 5 #"Boxof"
0 0 54 3 1 #" "
0 0 54 3 5 #"Thunk"
0 0 54 3 4 #"))])"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 11 #"define-type"
0 0 54 3 6 #" Thunk"
0 0 54 29 1 #"\n"
0 0 54 3 12 #"  [delay (e "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 3 #"Exp"
0 0 54 3 7 #") (env "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 3 #"Env"
0 0 54 3 7 #") (mem "
0 0 54 3 1 #":"
0 0 54 3 2 #" ("
0 0 54 3 5 #"Boxof"
0 0 54 3 2 #" ("
0 0 54 3 8 #"Optionof"
0 0 54 3 1 #" "
0 0 54 3 5 #"Value"
0 0 54 3 4 #")))]"
0 0 54 29 1 #"\n"
0 0 54 3 10 #"  [undef])"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 33 #"; Manipulation de l'environnement"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 17 #"define-type-alias"
0 0 54 3 6 #" Env ("
0 0 54 3 6 #"Listof"
0 0 54 3 1 #" "
0 0 54 3 7 #"Binding"
0 0 54 3 2 #"))"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 6 #"define"
0 0 54 3 14 #" mt-env empty)"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 6 #"define"
0 0 54 3 17 #" extend-env cons)"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 22 #";;;;;;;;;;;;;;;;;;;;;;"
0 0 54 29 1 #"\n"
0 0 54 3 22 #"; Analyse syntaxique ;"
0 0 54 29 1 #"\n"
0 0 54 3 22 #";;;;;;;;;;;;;;;;;;;;;;"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 6 #"define"
0 0 54 3 10 #" (compose "
0 0 54 3 1 #"f"
0 0 54 3 1 #" "
0 0 54 3 1 #"g"
0 0 54 3 1 #")"
0 0 54 29 1 #"\n"
0 0 54 3 3 #"  ("
0 0 54 3 6 #"lambda"
0 0 54 3 2 #" ("
0 0 54 3 1 #"x"
0 0 54 3 13 #") (f (g x))))"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 6 #"define"
0 0 54 3 9 #" (parse ["
0 0 54 3 1 #"s"
0 0 54 3 1 #" "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 5 #"S-Exp"
0 0 54 3 3 #"]) "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 3 #"Exp"
0 0 54 29 1 #"\n"
0 0 54 3 3 #"  ("
0 0 54 3 4 #"cond"
0 0 54 29 1 #"\n"
0 0 54 3 19 #"    [(s-exp-match? "
0 0 54 3 1 #"`"
0 0 54 3 6 #"NUMBER"
0 0 54 3 5 #" s) ("
0 0 54 3 4 #"numE"
0 0 54 3 20 #" (s-exp->number s))]"
0 0 54 29 1 #"\n"
0 0 54 3 19 #"    [(s-exp-match? "
0 0 54 3 1 #"`"
0 0 54 3 6 #"SYMBOL"
0 0 54 3 5 #" s) ("
0 0 54 3 3 #"idE"
0 0 54 3 20 #" (s-exp->symbol s))]"
0 0 54 29 1 #"\n"
0 0 54 3 19 #"    [(s-exp-match? "
0 0 54 3 1 #"`"
0 0 54 3 1 #"{"
0 0 54 3 1 #"+"
0 0 54 3 1 #" "
0 0 54 3 3 #"ANY"
0 0 54 3 1 #" "
0 0 54 3 3 #"ANY"
0 0 54 3 4 #"} s)"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"     ("
0 0 54 3 3 #"let"
0 0 54 3 23 #" ([sl (s-exp->list s)])"
0 0 54 29 1 #"\n"
0 0 54 3 8 #"       ("
0 0 54 3 5 #"plusE"
0 0 54 3 9 #" (parse ("
0 0 54 3 6 #"second"
0 0 54 3 14 #" sl)) (parse ("
0 0 54 3 5 #"third"
0 0 54 3 8 #" sl))))]"
0 0 54 29 1 #"\n"
0 0 54 3 19 #"    [(s-exp-match? "
0 0 54 3 1 #"`"
0 0 54 3 1 #"{"
0 0 54 3 1 #"*"
0 0 54 3 1 #" "
0 0 54 3 3 #"ANY"
0 0 54 3 1 #" "
0 0 54 3 3 #"ANY"
0 0 54 3 4 #"} s)"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"     ("
0 0 54 3 3 #"let"
0 0 54 3 23 #" ([sl (s-exp->list s)])"
0 0 54 29 1 #"\n"
0 0 54 3 8 #"       ("
0 0 54 3 5 #"multE"
0 0 54 3 9 #" (parse ("
0 0 54 3 6 #"second"
0 0 54 3 14 #" sl)) (parse ("
0 0 54 3 5 #"third"
0 0 54 3 8 #" sl))))]"
0 0 54 29 1 #"\n"
0 0 54 3 19 #"    [(s-exp-match? "
0 0 54 3 1 #"`"
0 0 54 3 1 #"{"
0 0 54 3 1 #"-"
0 0 54 3 1 #" "
0 0 54 3 3 #"ANY"
0 0 54 3 1 #" "
0 0 54 3 3 #"ANY"
0 0 54 3 4 #"} s)"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"     ("
0 0 54 3 3 #"let"
0 0 54 3 23 #" ([sl (s-exp->list s)])"
0 0 54 29 1 #"\n"
0 0 54 3 8 #"       ("
0 0 54 3 5 #"plusE"
0 0 54 3 9 #" (parse ("
0 0 54 3 6 #"second"
0 0 54 3 7 #" sl)) ("
0 0 54 3 5 #"multE"
0 0 54 3 2 #" ("
0 0 54 3 4 #"numE"
0 0 54 3 13 #" -1) (parse ("
0 0 54 3 5 #"third"
0 0 54 3 9 #" sl)))))]"
0 0 54 29 1 #"\n"
0 0 54 3 19 #"    [(s-exp-match? "
0 0 54 3 1 #"`"
0 0 54 3 1 #"{"
0 0 54 3 3 #"let"
0 0 54 3 3 #" {["
0 0 54 3 6 #"SYMBOL"
0 0 54 3 1 #" "
0 0 54 3 3 #"ANY"
0 0 54 3 3 #"]} "
0 0 54 3 3 #"ANY"
0 0 54 3 4 #"} s)"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"     ("
0 0 54 3 3 #"let"
0 0 54 3 23 #" ([sl (s-exp->list s)])"
0 0 54 29 1 #"\n"
0 0 54 3 8 #"       ("
0 0 54 3 3 #"let"
0 0 54 3 23 #" ([subst (s-exp->list ("
0 0 54 3 5 #"first"
0 0 54 3 15 #" (s-exp->list ("
0 0 54 3 6 #"second"
0 0 54 3 9 #" sl))))])"
0 0 54 29 1 #"\n"
0 0 54 3 10 #"         ("
0 0 54 3 4 #"appE"
0 0 54 3 2 #" ("
0 0 54 3 4 #"lamE"
0 0 54 3 17 #" (s-exp->symbol ("
0 0 54 3 5 #"first"
0 0 54 3 17 #" subst)) (parse ("
0 0 54 3 5 #"third"
0 0 54 3 15 #" sl))) (parse ("
0 0 54 3 6 #"second"
0 0 54 3 12 #" subst)))))]"
0 0 54 29 1 #"\n"
0 0 54 3 19 #"    [(s-exp-match? "
0 0 54 3 1 #"`"
0 0 54 3 1 #"{"
0 0 54 3 6 #"letrec"
0 0 54 3 3 #" {["
0 0 54 3 6 #"SYMBOL"
0 0 54 3 1 #" "
0 0 54 3 3 #"ANY"
0 0 54 3 3 #"] ["
0 0 54 3 6 #"SYMBOL"
0 0 54 3 1 #" "
0 0 54 3 3 #"ANY"
0 0 54 3 2 #"] "
0 0 54 3 3 #"..."
0 0 54 3 2 #"} "
0 0 54 3 3 #"ANY"
0 0 54 3 4 #"} s)"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"     ("
0 0 54 3 3 #"let"
0 0 54 3 23 #" ([sl (s-exp->list s)])"
0 0 54 29 1 #"\n"
0 0 54 3 8 #"       ("
0 0 54 3 3 #"let"
0 0 54 3 10 #" ([subst ("
0 0 54 3 3 #"map"
0 0 54 3 27 #" s-exp->list (s-exp->list ("
0 0 54 3 6 #"second"
0 0 54 3 8 #" sl)))])"
0 0 54 29 1 #"\n"
0 0 54 3 10 #"         ("
0 0 54 3 7 #"letrecE"
0 0 54 3 2 #" ("
0 0 54 3 3 #"map"
0 0 54 3 37 #" (compose s-exp->symbol first) subst)"
0 0 54 29 1 #"\n"
0 0 54 3 19 #"                  ("
0 0 54 3 3 #"map"
0 0 54 3 30 #" (compose parse second) subst)"
0 0 54 29 1 #"\n"
0 0 54 3 26 #"                  (parse ("
0 0 54 3 5 #"third"
0 0 54 3 9 #" sl)))))]"
0 0 54 29 1 #"\n"
0 0 54 3 19 #"    [(s-exp-match? "
0 0 54 3 1 #"`"
0 0 54 3 1 #"{"
0 0 54 3 2 #"if"
0 0 54 3 1 #" "
0 0 54 3 3 #"ANY"
0 0 54 3 1 #" "
0 0 54 3 3 #"ANY"
0 0 54 3 1 #" "
0 0 54 3 3 #"ANY"
0 0 54 3 4 #"} s)"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"     ("
0 0 54 3 3 #"let"
0 0 54 3 23 #" ([sl (s-exp->list s)])"
0 0 54 29 1 #"\n"
0 0 54 3 8 #"       ("
0 0 54 3 3 #"ifE"
0 0 54 3 9 #" (parse ("
0 0 54 3 6 #"second"
0 0 54 3 14 #" sl)) (parse ("
0 0 54 3 5 #"third"
0 0 54 3 14 #" sl)) (parse ("
0 0 54 3 6 #"fourth"
0 0 54 3 8 #" sl))))]"
0 0 54 29 1 #"\n"
0 0 54 3 19 #"    [(s-exp-match? "
0 0 54 3 1 #"`"
0 0 54 3 1 #"{"
0 0 54 3 6 #"lambda"
0 0 54 3 2 #" {"
0 0 54 3 6 #"SYMBOL"
0 0 54 3 2 #"} "
0 0 54 3 3 #"ANY"
0 0 54 3 4 #"} s)"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"     ("
0 0 54 3 3 #"let"
0 0 54 3 23 #" ([sl (s-exp->list s)])"
0 0 54 29 1 #"\n"
0 0 54 3 8 #"       ("
0 0 54 3 3 #"let"
0 0 54 3 21 #" ([sll (s-exp->list ("
0 0 54 3 6 #"second"
0 0 54 3 7 #" sl))])"
0 0 54 29 1 #"\n"
0 0 54 3 10 #"         ("
0 0 54 3 4 #"lamE"
0 0 54 3 17 #" (s-exp->symbol ("
0 0 54 3 5 #"first"
0 0 54 3 15 #" sll)) (parse ("
0 0 54 3 5 #"third"
0 0 54 3 9 #" sl)))))]"
0 0 54 29 1 #"\n"
0 0 54 3 19 #"    [(s-exp-match? "
0 0 54 3 1 #"`"
0 0 54 3 1 #"{"
0 0 54 3 4 #"pair"
0 0 54 3 1 #" "
0 0 54 3 3 #"ANY"
0 0 54 3 1 #" "
0 0 54 3 3 #"ANY"
0 0 54 3 4 #"} s)"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"     ("
0 0 54 3 3 #"let"
0 0 54 3 23 #" ([sl (s-exp->list s)])"
0 0 54 29 1 #"\n"
0 0 54 3 8 #"       ("
0 0 54 3 5 #"pairE"
0 0 54 3 9 #" (parse ("
0 0 54 3 6 #"second"
0 0 54 3 14 #" sl)) (parse ("
0 0 54 3 5 #"third"
0 0 54 3 8 #" sl))))]"
0 0 54 29 1 #"\n"
0 0 54 3 19 #"    [(s-exp-match? "
0 0 54 3 1 #"`"
0 0 54 3 1 #"{"
0 0 54 3 3 #"fst"
0 0 54 3 1 #" "
0 0 54 3 3 #"ANY"
0 0 54 3 4 #"} s)"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"     ("
0 0 54 3 3 #"let"
0 0 54 3 23 #" ([sl (s-exp->list s)])"
0 0 54 29 1 #"\n"
0 0 54 3 8 #"       ("
0 0 54 3 4 #"fstE"
0 0 54 3 9 #" (parse ("
0 0 54 3 6 #"second"
0 0 54 3 8 #" sl))))]"
0 0 54 29 1 #"\n"
0 0 54 3 19 #"    [(s-exp-match? "
0 0 54 3 1 #"`"
0 0 54 3 1 #"{"
0 0 54 3 3 #"snd"
0 0 54 3 1 #" "
0 0 54 3 3 #"ANY"
0 0 54 3 4 #"} s)"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"     ("
0 0 54 3 3 #"let"
0 0 54 3 23 #" ([sl (s-exp->list s)])"
0 0 54 29 1 #"\n"
0 0 54 3 8 #"       ("
0 0 54 3 4 #"sndE"
0 0 54 3 9 #" (parse ("
0 0 54 3 6 #"second"
0 0 54 3 8 #" sl))))]"
0 0 54 29 1 #"\n"
0 0 54 3 19 #"    [(s-exp-match? "
0 0 54 3 1 #"`"
0 0 54 3 1 #"{"
0 0 54 3 3 #"ANY"
0 0 54 3 1 #" "
0 0 54 3 3 #"ANY"
0 0 54 3 4 #"} s)"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"     ("
0 0 54 3 3 #"let"
0 0 54 3 23 #" ([sl (s-exp->list s)])"
0 0 54 29 1 #"\n"
0 0 54 3 8 #"       ("
0 0 54 3 4 #"appE"
0 0 54 3 9 #" (parse ("
0 0 54 3 5 #"first"
0 0 54 3 14 #" sl)) (parse ("
0 0 54 3 6 #"second"
0 0 54 3 8 #" sl))))]"
0 0 54 29 1 #"\n"
0 0 54 3 5 #"    ["
0 0 54 3 4 #"else"
0 0 54 3 1 #" "
0 0 55 3 7 #"(error "
0 0 55 3 1 #"'"
0 0 55 3 5 #"parse"
0 0 55 3 17 #" \"invalid input\")"
0 0 54 3 3 #"]))"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 18 #";;;;;;;;;;;;;;;;;;"
0 0 54 29 1 #"\n"
0 0 54 3 19 #"; Interpr\303\251tation ;"
0 0 54 29 1 #"\n"
0 0 54 3 18 #";;;;;;;;;;;;;;;;;;"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 6 #"define"
0 0 54 3 11 #" (find-box "
0 0 54 3 1 #"s"
0 0 54 3 1 #" "
0 0 54 3 3 #"env"
0 0 54 3 1 #")"
0 0 54 29 1 #"\n"
0 0 54 3 3 #"  ("
0 0 54 3 4 #"cond"
0 0 54 29 1 #"\n"
0 0 54 3 18 #"    [(empty? env) "
0 0 55 3 1 #"("
0 0 55 3 3 #"box"
0 0 55 3 2 #" ("
0 0 55 3 7 #"undef))"
0 0 54 3 1 #"]"
0 0 54 29 1 #"\n"
0 0 54 3 27 #"    [(equal? s (bind-name ("
0 0 54 3 5 #"first"
0 0 54 3 19 #" env))) (bind-val ("
0 0 54 3 5 #"first"
0 0 54 3 7 #" env))]"
0 0 54 29 1 #"\n"
0 0 54 3 5 #"    ["
0 0 54 3 4 #"else"
0 0 54 3 14 #" (find-box s ("
0 0 54 3 4 #"rest"
0 0 54 3 9 #" env))]))"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 6 #"define"
0 0 54 3 11 #" (bind-all "
0 0 54 3 1 #"s"
0 0 54 3 1 #" "
0 0 54 3 3 #"env"
0 0 54 3 1 #")"
0 0 54 29 1 #"\n"
0 0 54 3 3 #"  ("
0 0 54 3 2 #"if"
0 0 54 3 11 #" (empty? s)"
0 0 54 29 1 #"\n"
0 0 54 3 9 #"      env"
0 0 54 29 1 #"\n"
0 0 54 3 17 #"      (bind-all ("
0 0 54 3 4 #"rest"
0 0 54 3 17 #" s) (extend-env ("
0 0 54 3 4 #"bind"
0 0 54 3 2 #" ("
0 0 54 3 5 #"first"
0 0 54 3 5 #" s) ("
0 0 54 3 3 #"box"
0 0 54 3 2 #" ("
0 0 54 3 5 #"undef"
0 0 54 3 11 #"))) env))))"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 6 #"define"
0 0 54 3 14 #" (set-all-box "
0 0 54 3 1 #"s"
0 0 54 3 1 #" "
0 0 54 3 3 #"rhs"
0 0 54 3 1 #" "
0 0 54 3 4 #"body"
0 0 54 3 1 #" "
0 0 54 3 3 #"env"
0 0 54 3 1 #")"
0 0 54 29 1 #"\n"
0 0 54 3 3 #"  ("
0 0 54 3 2 #"if"
0 0 54 3 13 #" (empty? rhs)"
0 0 54 29 1 #"\n"
0 0 54 3 23 #"      (interp body env)"
0 0 54 29 1 #"\n"
0 0 54 3 7 #"      ("
0 0 54 3 5 #"begin"
0 0 54 29 1 #"\n"
0 0 54 3 9 #"        ("
0 0 54 3 8 #"set-box!"
0 0 54 3 12 #" (find-box ("
0 0 54 3 5 #"first"
0 0 54 3 10 #" s) env) ("
0 0 54 3 5 #"delay"
0 0 54 3 2 #" ("
0 0 54 3 5 #"first"
0 0 54 3 11 #" rhs) env ("
0 0 54 3 3 #"box"
0 0 54 3 2 #" ("
0 0 54 3 4 #"none"
0 0 54 3 4 #"))))"
0 0 54 29 1 #"\n"
0 0 54 3 22 #"        (set-all-box ("
0 0 54 3 4 #"rest"
0 0 54 3 5 #" s) ("
0 0 54 3 4 #"rest"
0 0 54 3 18 #" rhs) body env))))"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 15 #"; Interpr\303\251teur"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 6 #"define"
0 0 54 3 10 #" (interp ["
0 0 54 3 1 #"e"
0 0 54 3 1 #" "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 3 #"Exp"
0 0 54 3 3 #"] ["
0 0 54 3 3 #"env"
0 0 54 3 1 #" "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 3 #"Env"
0 0 54 3 3 #"]) "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 5 #"Value"
0 0 54 29 1 #"\n"
0 0 54 3 3 #"  ("
0 0 54 3 9 #"type-case"
0 0 54 3 1 #" "
0 0 54 3 3 #"Exp"
0 0 54 3 2 #" e"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"    [("
0 0 54 3 4 #"numE"
0 0 54 3 5 #" n) ("
0 0 54 3 4 #"numV"
0 0 54 3 4 #" n)]"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"    [("
0 0 54 3 3 #"idE"
0 0 54 3 27 #" s) (force (lookup s env))]"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"    [("
0 0 54 3 5 #"plusE"
0 0 54 3 43 #" l r) (num+ (interp l env) (interp r env))]"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"    [("
0 0 54 3 5 #"multE"
0 0 54 3 43 #" l r) (num* (interp l env) (interp r env))]"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"    [("
0 0 54 3 3 #"ifE"
0 0 54 3 9 #" cnd l r)"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"     ("
0 0 54 3 9 #"type-case"
0 0 54 3 1 #" "
0 0 54 3 5 #"Value"
0 0 54 3 17 #" (interp cnd env)"
0 0 54 29 1 #"\n"
0 0 54 3 9 #"       [("
0 0 54 3 4 #"numV"
0 0 54 3 5 #" n) ("
0 0 54 3 2 #"if"
0 0 54 3 46 #" (not (= n 0)) (interp l env) (interp r env))]"
0 0 54 29 1 #"\n"
0 0 54 3 8 #"       ["
0 0 54 3 4 #"else"
0 0 54 3 1 #" "
0 0 55 3 7 #"(error "
0 0 55 3 1 #"'"
0 0 55 3 6 #"interp"
0 0 55 3 16 #" \"not a number\")"
0 0 54 3 3 #"])]"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"    [("
0 0 54 3 4 #"lamE"
0 0 54 3 12 #" par body) ("
0 0 54 3 5 #"closV"
0 0 54 3 15 #" par body env)]"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"    [("
0 0 54 3 7 #"letrecE"
0 0 54 3 55 #" s rhs body) (set-all-box s rhs body (bind-all s env))]"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"    [("
0 0 54 3 4 #"appE"
0 0 54 3 7 #" f arg)"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"     ("
0 0 54 3 9 #"type-case"
0 0 54 3 1 #" "
0 0 54 3 5 #"Value"
0 0 54 3 15 #" (interp f env)"
0 0 54 29 1 #"\n"
0 0 54 3 9 #"       [("
0 0 54 3 5 #"closV"
0 0 54 3 16 #" par body c-env)"
0 0 54 29 1 #"\n"
0 0 54 3 34 #"        (interp body (extend-env ("
0 0 54 3 4 #"bind"
0 0 54 3 6 #" par ("
0 0 54 3 3 #"box"
0 0 54 3 2 #" ("
0 0 54 3 5 #"delay"
0 0 54 3 10 #" arg env ("
0 0 54 3 3 #"box"
0 0 54 3 2 #" ("
0 0 54 3 4 #"none"
0 0 54 3 14 #"))))) c-env))]"
0 0 54 29 1 #"\n"
0 0 54 3 8 #"       ["
0 0 54 3 4 #"else"
0 0 54 3 8 #" (error "
0 0 54 3 1 #"'"
0 0 54 3 6 #"interp"
0 0 54 3 21 #" \"not a function\")])]"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"    [("
0 0 54 3 5 #"pairE"
0 0 54 3 9 #" fst snd)"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"     ("
0 0 54 3 5 #"pairV"
0 0 54 3 2 #" ("
0 0 54 3 5 #"delay"
0 0 54 3 10 #" fst env ("
0 0 54 3 3 #"box"
0 0 54 3 2 #" ("
0 0 54 3 4 #"none"
0 0 54 3 5 #"))) ("
0 0 54 3 5 #"delay"
0 0 54 3 10 #" snd env ("
0 0 54 3 3 #"box"
0 0 54 3 2 #" ("
0 0 54 3 4 #"none"
0 0 54 3 5 #"))))]"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"    [("
0 0 54 3 4 #"fstE"
0 0 54 3 5 #" e) ("
0 0 54 3 9 #"type-case"
0 0 54 3 1 #" "
0 0 54 3 5 #"Value"
0 0 54 3 15 #" (interp e env)"
0 0 54 29 1 #"\n"
0 0 54 3 18 #"                [("
0 0 54 3 5 #"pairV"
0 0 54 3 16 #" f s) (force f)]"
0 0 54 29 1 #"\n"
0 0 54 3 17 #"                ["
0 0 54 3 4 #"else"
0 0 54 3 8 #" (error "
0 0 54 3 1 #"'"
0 0 54 3 6 #"interp"
0 0 54 3 17 #" \"not a pair\")])]"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"    [("
0 0 54 3 4 #"sndE"
0 0 54 3 5 #" e) ("
0 0 54 3 9 #"type-case"
0 0 54 3 1 #" "
0 0 54 3 5 #"Value"
0 0 54 3 15 #" (interp e env)"
0 0 54 29 1 #"\n"
0 0 54 3 18 #"                [("
0 0 54 3 5 #"pairV"
0 0 54 3 16 #" f s) (force s)]"
0 0 54 29 1 #"\n"
0 0 54 3 17 #"                ["
0 0 54 3 4 #"else"
0 0 54 3 8 #" (error "
0 0 54 3 1 #"'"
0 0 54 3 6 #"interp"
0 0 54 3 19 #" \"not a pair\")])]))"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 44 #"; Fonctions utilitaires pour l'arithm\303\251tique"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 6 #"define"
0 0 54 3 10 #" (num-op ["
0 0 54 3 2 #"op"
0 0 54 3 1 #" "
0 0 54 3 1 #":"
0 0 54 3 2 #" ("
0 0 54 3 6 #"Number"
0 0 54 3 1 #" "
0 0 54 3 6 #"Number"
0 0 54 3 1 #" "
0 0 54 3 2 #"->"
0 0 54 3 1 #" "
0 0 54 3 6 #"Number"
0 0 54 3 2 #")]"
0 0 54 29 1 #"\n"
0 0 54 3 17 #"                ["
0 0 54 3 1 #"l"
0 0 54 3 1 #" "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 5 #"Value"
0 0 54 3 3 #"] ["
0 0 54 3 1 #"r"
0 0 54 3 1 #" "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 5 #"Value"
0 0 54 3 3 #"]) "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 5 #"Value"
0 0 54 29 1 #"\n"
0 0 54 3 3 #"  ("
0 0 54 3 2 #"if"
0 0 54 3 2 #" ("
0 0 54 3 3 #"and"
0 0 54 3 21 #" (numV? l) (numV? r))"
0 0 54 29 1 #"\n"
0 0 54 3 7 #"      ("
0 0 54 3 4 #"numV"
0 0 54 3 28 #" (op (numV-n l) (numV-n r)))"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"      "
0 0 55 3 7 #"(error "
0 0 55 3 1 #"'"
0 0 55 3 6 #"interp"
0 0 55 3 16 #" \"not a number\")"
0 0 54 3 2 #"))"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 6 #"define"
0 0 54 3 8 #" (num+ ["
0 0 54 3 1 #"l"
0 0 54 3 1 #" "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 5 #"Value"
0 0 54 3 3 #"] ["
0 0 54 3 1 #"r"
0 0 54 3 1 #" "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 5 #"Value"
0 0 54 3 3 #"]) "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 5 #"Value"
0 0 54 29 1 #"\n"
0 0 54 3 17 #"  (num-op + l r))"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 6 #"define"
0 0 54 3 8 #" (num* ["
0 0 54 3 1 #"l"
0 0 54 3 1 #" "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 5 #"Value"
0 0 54 3 3 #"] ["
0 0 54 3 1 #"r"
0 0 54 3 1 #" "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 5 #"Value"
0 0 54 3 3 #"]) "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 5 #"Value"
0 0 54 29 1 #"\n"
0 0 54 3 17 #"  (num-op * l r))"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 6 #"define"
0 0 54 3 9 #" (force ["
0 0 54 3 1 #"t"
0 0 54 3 1 #" "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 5 #"Thunk"
0 0 54 3 3 #"]) "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 5 #"Value"
0 0 54 29 1 #"\n"
0 0 54 3 3 #"  ("
0 0 54 3 9 #"type-case"
0 0 54 3 1 #" "
0 0 54 3 5 #"Thunk"
0 0 54 3 2 #" t"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"    [("
0 0 54 3 5 #"delay"
0 0 54 3 11 #" e env mem)"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"     ("
0 0 54 3 9 #"type-case"
0 0 54 3 2 #" ("
0 0 54 3 8 #"Optionof"
0 0 54 3 1 #" "
0 0 54 3 5 #"Value"
0 0 54 3 3 #") ("
0 0 54 3 5 #"unbox"
0 0 54 3 5 #" mem)"
0 0 54 29 1 #"\n"
0 0 54 3 9 #"       [("
0 0 54 3 4 #"none"
0 0 54 3 3 #") ("
0 0 54 3 5 #"begin"
0 0 54 29 1 #"\n"
0 0 54 3 18 #"                 ("
0 0 54 3 8 #"set-box!"
0 0 54 3 6 #" mem ("
0 0 54 3 4 #"some"
0 0 54 3 2 #" ("
0 0 54 3 6 #"undefV"
0 0 54 3 3 #")))"
0 0 54 29 1 #"\n"
0 0 54 3 18 #"                 ("
0 0 54 3 3 #"let"
0 0 54 3 23 #" ([val (interp e env)])"
0 0 54 29 1 #"\n"
0 0 54 3 22 #"                     ("
0 0 54 3 5 #"begin"
0 0 54 29 1 #"\n"
0 0 54 3 24 #"                       ("
0 0 54 3 8 #"set-box!"
0 0 54 3 6 #" mem ("
0 0 54 3 4 #"some"
0 0 54 3 6 #" val))"
0 0 54 29 1 #"\n"
0 0 54 3 30 #"                       val)))]"
0 0 54 29 1 #"\n"
0 0 54 3 9 #"       [("
0 0 54 3 4 #"some"
0 0 54 3 12 #" val) val])]"
0 0 54 29 1 #"\n"
0 0 54 3 6 #"    [("
0 0 54 3 5 #"undef"
0 0 54 3 2 #") "
0 0 55 3 1 #"("
0 0 55 3 7 #"undefV)"
0 0 54 3 3 #"]))"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 52 #"; Recherche d'un identificateur dans l'environnement"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 6 #"define"
0 0 54 3 10 #" (lookup ["
0 0 54 3 1 #"n"
0 0 54 3 1 #" "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 6 #"Symbol"
0 0 54 3 3 #"] ["
0 0 54 3 3 #"env"
0 0 54 3 1 #" "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 3 #"Env"
0 0 54 3 3 #"]) "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 5 #"Thunk"
0 0 54 29 1 #"\n"
0 0 54 3 3 #"  ("
0 0 54 3 4 #"cond"
0 0 54 29 1 #"\n"
0 0 54 3 25 #"    [(empty? env) (error "
0 0 54 3 1 #"'"
0 0 54 3 6 #"lookup"
0 0 54 3 20 #" \"free identifier\")]"
0 0 54 29 1 #"\n"
0 0 54 3 27 #"    [(equal? n (bind-name ("
0 0 54 3 5 #"first"
0 0 54 3 9 #" env))) ("
0 0 54 3 5 #"unbox"
0 0 54 3 12 #" (bind-val ("
0 0 54 3 5 #"first"
0 0 54 3 8 #" env)))]"
0 0 54 29 1 #"\n"
0 0 54 3 5 #"    ["
0 0 54 3 4 #"else"
0 0 54 3 12 #" (lookup n ("
0 0 54 3 4 #"rest"
0 0 54 3 9 #" env))]))"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 9 #";;;;;;;;;"
0 0 54 29 1 #"\n"
0 0 54 3 9 #"; Tests ;"
0 0 54 29 1 #"\n"
0 0 54 3 9 #";;;;;;;;;"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 6 #"define"
0 0 54 3 15 #" (interp-expr ["
0 0 54 3 1 #"e"
0 0 54 3 1 #" "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 5 #"S-Exp"
0 0 54 3 3 #"]) "
0 0 54 3 1 #":"
0 0 54 3 1 #" "
0 0 54 3 5 #"Value"
0 0 54 29 1 #"\n"
0 0 54 3 28 #"  (interp (parse e) mt-env))"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 4 #"test"
0 0 54 3 14 #" (interp-expr "
0 0 54 3 1 #"`"
0 0 54 3 1 #"{"
0 0 54 3 6 #"letrec"
0 0 54 3 3 #" {["
0 0 54 3 1 #"x"
0 0 54 3 1 #" "
0 0 54 3 1 #"x"
0 0 54 3 3 #"]} "
0 0 54 3 1 #"x"
0 0 54 3 4 #"}) ("
0 0 54 3 6 #"undefV"
0 0 54 3 2 #"))"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 4 #"test"
0 0 54 3 14 #" (interp-expr "
0 0 54 3 1 #"`"
0 0 54 3 1 #"{"
0 0 54 3 6 #"letrec"
0 0 54 3 3 #" {["
0 0 54 3 1 #"x"
0 0 54 3 1 #" "
0 0 54 3 1 #"8"
0 0 54 3 3 #"]} "
0 0 54 3 1 #"x"
0 0 54 3 4 #"}) ("
0 0 54 3 4 #"numV"
0 0 54 3 4 #" 8))"
0 0 54 29 1 #"\n"
0 0 54 3 2 #"( "
0 0 54 3 4 #"test"
0 0 54 3 14 #" ( interp-expr"
0 0 54 29 1 #"\n"
0 0 54 3 9 #"         "
0 0 54 3 1 #"`"
0 0 54 3 2 #"{ "
0 0 54 3 6 #"letrec"
0 0 54 3 4 #" {[ "
0 0 54 3 12 #"numbers-from"
0 0 54 3 3 #" { "
0 0 54 3 6 #"lambda"
0 0 54 3 2 #" {"
0 0 54 3 1 #"n"
0 0 54 3 1 #"}"
0 0 54 29 1 #"\n"
0 0 54 3 40 #"                                      { "
0 0 54 3 4 #"pair"
0 0 54 3 1 #" "
0 0 54 3 1 #"n"
0 0 54 29 1 #"\n"
0 0 54 3 47 #"                                             { "
0 0 54 3 12 #"numbers-from"
0 0 54 3 2 #" {"
0 0 54 3 1 #"+"
0 0 54 3 1 #" "
0 0 54 3 1 #"n"
0 0 54 3 1 #" "
0 0 54 3 1 #"1"
0 0 54 3 9 #"} } } }]}"
0 0 54 29 1 #"\n"
0 0 54 3 15 #"             { "
0 0 54 3 3 #"let"
0 0 54 3 4 #" {[ "
0 0 54 3 4 #"ints"
0 0 54 3 3 #" { "
0 0 54 3 12 #"numbers-from"
0 0 54 3 1 #" "
0 0 54 3 1 #"0"
0 0 54 3 3 #"}]}"
0 0 54 29 1 #"\n"
0 0 54 3 18 #"                { "
0 0 54 3 3 #"fst"
0 0 54 3 3 #" { "
0 0 54 3 3 #"snd"
0 0 54 3 3 #" { "
0 0 54 3 3 #"snd"
0 0 54 3 3 #" { "
0 0 54 3 3 #"snd"
0 0 54 3 1 #" "
0 0 54 3 4 #"ints"
0 0 54 3 13 #" } } } } } })"
0 0 54 29 1 #"\n"
0 0 54 3 9 #"       ( "
0 0 54 3 4 #"numV"
0 0 54 3 4 #" 3))"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 2 #"( "
0 0 54 3 4 #"test"
0 0 54 3 14 #" ( interp-expr"
0 0 54 29 1 #"\n"
0 0 54 3 9 #"         "
0 0 54 3 1 #"`"
0 0 54 3 2 #"{ "
0 0 54 3 6 #"letrec"
0 0 54 3 3 #" {["
0 0 54 3 5 #"even?"
0 0 54 3 2 #" {"
0 0 54 3 6 #"lambda"
0 0 54 3 2 #" {"
0 0 54 3 1 #"n"
0 0 54 3 3 #"} {"
0 0 54 3 2 #"if"
0 0 54 3 1 #" "
0 0 54 3 1 #"n"
0 0 54 29 1 #"\n"
0 0 54 3 44 #"                                           {"
0 0 54 3 4 #"odd?"
0 0 54 3 2 #" {"
0 0 54 3 1 #"-"
0 0 54 3 1 #" "
0 0 54 3 1 #"n"
0 0 54 3 1 #" "
0 0 54 3 1 #"1"
0 0 54 3 3 #"} }"
0 0 54 29 1 #"\n"
0 0 54 3 43 #"                                           "
0 0 54 3 1 #"1"
0 0 54 3 3 #"}}]"
0 0 54 29 1 #"\n"
0 0 54 3 21 #"                    ["
0 0 54 3 4 #"odd?"
0 0 54 3 2 #" {"
0 0 54 3 6 #"lambda"
0 0 54 3 2 #" {"
0 0 54 3 1 #"n"
0 0 54 3 3 #"} {"
0 0 54 3 2 #"if"
0 0 54 3 1 #" "
0 0 54 3 1 #"n"
0 0 54 29 1 #"\n"
0 0 54 3 43 #"                                          {"
0 0 54 3 5 #"even?"
0 0 54 3 2 #" {"
0 0 54 3 1 #"-"
0 0 54 3 1 #" "
0 0 54 3 1 #"n"
0 0 54 3 1 #" "
0 0 54 3 1 #"1"
0 0 54 3 3 #"} }"
0 0 54 29 1 #"\n"
0 0 54 3 42 #"                                          "
0 0 54 3 1 #"0"
0 0 54 3 5 #"} }]}"
0 0 54 29 1 #"\n"
0 0 54 3 15 #"             { "
0 0 54 3 5 #"even?"
0 0 54 3 1 #" "
0 0 54 3 1 #"5"
0 0 54 3 4 #"} })"
0 0 54 29 1 #"\n"
0 0 54 3 8 #"       ("
0 0 54 3 4 #"numV"
0 0 54 3 4 #" 0))"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 2 #"( "
0 0 54 3 4 #"test"
0 0 54 3 14 #" ( interp-expr"
0 0 54 29 1 #"\n"
0 0 54 3 9 #"         "
0 0 54 3 1 #"`"
0 0 54 3 2 #"{ "
0 0 54 3 6 #"letrec"
0 0 54 3 3 #" {["
0 0 54 3 5 #"even?"
0 0 54 3 2 #" {"
0 0 54 3 6 #"lambda"
0 0 54 3 2 #" {"
0 0 54 3 1 #"n"
0 0 54 3 3 #"} {"
0 0 54 3 2 #"if"
0 0 54 3 1 #" "
0 0 54 3 1 #"n"
0 0 54 29 1 #"\n"
0 0 54 3 44 #"                                           {"
0 0 54 3 4 #"odd?"
0 0 54 3 2 #" {"
0 0 54 3 1 #"-"
0 0 54 3 1 #" "
0 0 54 3 1 #"n"
0 0 54 3 1 #" "
0 0 54 3 1 #"1"
0 0 54 3 3 #"} }"
0 0 54 29 1 #"\n"
0 0 54 3 43 #"                                           "
0 0 54 3 1 #"1"
0 0 54 3 3 #"}}]"
0 0 54 29 1 #"\n"
0 0 54 3 21 #"                    ["
0 0 54 3 4 #"odd?"
0 0 54 3 2 #" {"
0 0 54 3 6 #"lambda"
0 0 54 3 2 #" {"
0 0 54 3 1 #"n"
0 0 54 3 3 #"} {"
0 0 54 3 2 #"if"
0 0 54 3 1 #" "
0 0 54 3 1 #"n"
0 0 54 29 1 #"\n"
0 0 54 3 43 #"                                          {"
0 0 54 3 5 #"even?"
0 0 54 3 2 #" {"
0 0 54 3 1 #"-"
0 0 54 3 1 #" "
0 0 54 3 1 #"n"
0 0 54 3 1 #" "
0 0 54 3 1 #"1"
0 0 54 3 3 #"} }"
0 0 54 29 1 #"\n"
0 0 54 3 42 #"                                          "
0 0 54 3 1 #"0"
0 0 54 3 5 #"} }]}"
0 0 54 29 1 #"\n"
0 0 54 3 15 #"             { "
0 0 54 3 4 #"odd?"
0 0 54 3 1 #" "
0 0 54 3 2 #"15"
0 0 54 3 4 #"} })"
0 0 54 29 1 #"\n"
0 0 54 3 8 #"       ("
0 0 54 3 4 #"numV"
0 0 54 3 4 #" 1))"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 4 #"test"
0 0 54 3 13 #" (interp-expr"
0 0 54 29 1 #"\n"
0 0 54 3 9 #"         "
0 0 54 3 1 #"`"
0 0 54 3 2 #"{ "
0 0 54 3 6 #"letrec"
0 0 54 29 1 #"\n"
0 0 54 3 16 #"               {"
0 0 54 3 34 #"; curryfied map2 on infinite lists"
0 0 54 29 1 #"\n"
0 0 54 3 17 #"                ["
0 0 54 3 4 #"map2"
0 0 54 3 3 #" { "
0 0 54 3 6 #"lambda"
0 0 54 3 2 #" {"
0 0 54 3 1 #"f"
0 0 54 3 1 #"}"
0 0 54 29 1 #"\n"
0 0 54 3 27 #"                         { "
0 0 54 3 6 #"lambda"
0 0 54 3 2 #" {"
0 0 54 3 2 #"l1"
0 0 54 3 1 #"}"
0 0 54 29 1 #"\n"
0 0 54 3 30 #"                            { "
0 0 54 3 6 #"lambda"
0 0 54 3 2 #" {"
0 0 54 3 2 #"l2"
0 0 54 3 1 #"}"
0 0 54 29 1 #"\n"
0 0 54 3 33 #"                               { "
0 0 54 3 4 #"pair"
0 0 54 3 4 #" { {"
0 0 54 3 1 #"f"
0 0 54 3 3 #" { "
0 0 54 3 3 #"fst"
0 0 54 3 1 #" "
0 0 54 3 2 #"l1"
0 0 54 3 6 #"} } { "
0 0 54 3 3 #"fst"
0 0 54 3 1 #" "
0 0 54 3 2 #"l2"
0 0 54 3 3 #"} }"
0 0 54 29 1 #"\n"
0 0 54 3 44 #"                                      { { { "
0 0 54 3 4 #"map2"
0 0 54 3 1 #" "
0 0 54 3 1 #"f"
0 0 54 3 4 #"} { "
0 0 54 3 3 #"snd"
0 0 54 3 1 #" "
0 0 54 3 2 #"l1"
0 0 54 3 6 #"} } { "
0 0 54 3 3 #"snd"
0 0 54 3 1 #" "
0 0 54 3 2 #"l2"
0 0 54 3 12 #"} } } } } }]"
0 0 54 29 1 #"\n"
0 0 54 3 16 #"                "
0 0 54 3 20 #"; curryfied list-ref"
0 0 54 29 1 #"\n"
0 0 54 3 17 #"                ["
0 0 54 3 8 #"list-ref"
0 0 54 3 3 #" { "
0 0 54 3 6 #"lambda"
0 0 54 3 2 #" {"
0 0 54 3 1 #"l"
0 0 54 3 1 #"}"
0 0 54 29 1 #"\n"
0 0 54 3 31 #"                             { "
0 0 54 3 6 #"lambda"
0 0 54 3 2 #" {"
0 0 54 3 1 #"n"
0 0 54 3 1 #"}"
0 0 54 29 1 #"\n"
0 0 54 3 34 #"                                { "
0 0 54 3 2 #"if"
0 0 54 3 1 #" "
0 0 54 3 1 #"n"
0 0 54 29 1 #"\n"
0 0 54 3 41 #"                                     { { "
0 0 54 3 8 #"list-ref"
0 0 54 3 3 #" { "
0 0 54 3 3 #"snd"
0 0 54 3 1 #" "
0 0 54 3 1 #"l"
0 0 54 3 5 #"} } {"
0 0 54 3 1 #"-"
0 0 54 3 1 #" "
0 0 54 3 1 #"n"
0 0 54 3 1 #" "
0 0 54 3 1 #"1"
0 0 54 3 3 #"} }"
0 0 54 29 1 #"\n"
0 0 54 3 39 #"                                     { "
0 0 54 3 3 #"fst"
0 0 54 3 1 #" "
0 0 54 3 1 #"l"
0 0 54 3 8 #"} } } }]"
0 0 54 29 1 #"\n"
0 0 54 3 16 #"                "
0 0 54 3 29 #"; curryfied addition function"
0 0 54 29 1 #"\n"
0 0 54 3 17 #"                ["
0 0 54 3 3 #"add"
0 0 54 3 3 #" { "
0 0 54 3 6 #"lambda"
0 0 54 3 2 #" {"
0 0 54 3 1 #"x"
0 0 54 3 4 #"} { "
0 0 54 3 6 #"lambda"
0 0 54 3 2 #" {"
0 0 54 3 1 #"y"
0 0 54 3 3 #"} {"
0 0 54 3 1 #"+"
0 0 54 3 1 #" "
0 0 54 3 1 #"x"
0 0 54 3 1 #" "
0 0 54 3 1 #"y"
0 0 54 3 6 #"} } }]"
0 0 54 29 1 #"\n"
0 0 54 3 16 #"                "
0 0 54 3 33 #"; infinite fibonacci sequence !!!"
0 0 54 29 1 #"\n"
0 0 54 3 16 #"                "
0 0 54 3 31 #"; ( list 0 1 1 2 3 5 8 13 ... )"
0 0 54 29 1 #"\n"
0 0 54 3 18 #"                [ "
0 0 54 3 4 #"fibo"
0 0 54 3 3 #" { "
0 0 54 3 4 #"pair"
0 0 54 3 1 #" "
0 0 54 3 1 #"0"
0 0 54 29 1 #"\n"
0 0 54 3 32 #"                              { "
0 0 54 3 4 #"pair"
0 0 54 3 1 #" "
0 0 54 3 1 #"1"
0 0 54 29 1 #"\n"
0 0 54 3 43 #"                                     { { { "
0 0 54 3 4 #"map2"
0 0 54 3 1 #" "
0 0 54 3 3 #"add"
0 0 54 3 3 #" } "
0 0 54 3 4 #"fibo"
0 0 54 3 5 #" } { "
0 0 54 3 3 #"snd"
0 0 54 3 1 #" "
0 0 54 3 4 #"fibo"
0 0 54 3 10 #" } } } }]}"
0 0 54 29 1 #"\n"
0 0 54 3 17 #"             { { "
0 0 54 3 8 #"list-ref"
0 0 54 3 1 #" "
0 0 54 3 4 #"fibo"
0 0 54 3 3 #" } "
0 0 54 3 1 #"7"
0 0 54 3 4 #"} })"
0 0 54 29 1 #"\n"
0 0 54 3 9 #"       ( "
0 0 54 3 4 #"numV"
0 0 54 3 5 #" 13))"
0 0 54 29 1 #"\n"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 4 #"test"
0 0 54 3 14 #" (interp-expr "
0 0 54 3 1 #"`"
0 0 54 3 1 #"{"
0 0 54 3 3 #"let"
0 0 54 3 3 #" {["
0 0 54 3 1 #"x"
0 0 54 3 2 #" {"
0 0 54 3 1 #"1"
0 0 54 3 1 #" "
0 0 54 3 1 #"2"
0 0 54 3 4 #"}]} "
0 0 54 3 1 #"3"
0 0 54 3 4 #"}) ("
0 0 54 3 4 #"numV"
0 0 54 3 4 #" 3))"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 4 #"test"
0 0 54 3 14 #" (interp-expr "
0 0 54 3 1 #"`"
0 0 54 3 1 #"{"
0 0 54 3 6 #"letrec"
0 0 54 3 3 #" {["
0 0 54 3 1 #"x"
0 0 54 3 2 #" {"
0 0 54 3 1 #"1"
0 0 54 3 1 #" "
0 0 54 3 1 #"2"
0 0 54 3 4 #"}]} "
0 0 54 3 1 #"3"
0 0 54 3 4 #"}) ("
0 0 54 3 4 #"numV"
0 0 54 3 4 #" 3))"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 4 #"test"
0 0 54 3 14 #" (interp-expr "
0 0 54 3 1 #"`"
0 0 54 3 1 #"{"
0 0 54 3 3 #"snd"
0 0 54 3 2 #" {"
0 0 54 3 4 #"pair"
0 0 54 3 2 #" {"
0 0 54 3 1 #"1"
0 0 54 3 1 #" "
0 0 54 3 1 #"2"
0 0 54 3 2 #"} "
0 0 54 3 1 #"3"
0 0 54 3 5 #"}}) ("
0 0 54 3 4 #"numV"
0 0 54 3 4 #" 3))"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 4 #"test"
0 0 54 3 14 #" (interp-expr "
0 0 54 3 1 #"`"
0 0 54 3 1 #"{"
0 0 54 3 6 #"letrec"
0 0 54 3 3 #" {["
0 0 54 3 3 #"fac"
0 0 54 3 2 #" {"
0 0 54 3 6 #"lambda"
0 0 54 3 2 #" {"
0 0 54 3 1 #"n"
0 0 54 3 1 #"}"
0 0 54 29 1 #"\n"
0 0 54 3 37 #"                                    {"
0 0 54 3 2 #"if"
0 0 54 3 1 #" "
0 0 54 3 1 #"n"
0 0 54 29 1 #"\n"
0 0 54 3 41 #"                                        {"
0 0 54 3 1 #"*"
0 0 54 3 1 #" "
0 0 54 3 1 #"n"
0 0 54 3 2 #" {"
0 0 54 3 3 #"fac"
0 0 54 3 2 #" {"
0 0 54 3 1 #"-"
0 0 54 3 1 #" "
0 0 54 3 1 #"n"
0 0 54 3 1 #" "
0 0 54 3 1 #"1"
0 0 54 3 3 #"}}}"
0 0 54 29 1 #"\n"
0 0 54 3 40 #"                                        "
0 0 54 3 1 #"1"
0 0 54 3 4 #"}}]}"
0 0 54 29 1 #"\n"
0 0 54 3 23 #"                      {"
0 0 54 3 3 #"fac"
0 0 54 3 1 #" "
0 0 54 3 1 #"6"
0 0 54 3 3 #"}})"
0 0 54 29 1 #"\n"
0 0 54 3 7 #"      ("
0 0 54 3 4 #"numV"
0 0 54 3 6 #" 720))"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 8 #"test/exn"
0 0 54 3 14 #" (interp-expr "
0 0 54 3 1 #"`"
0 0 54 3 1 #"{"
0 0 54 3 3 #"fst"
0 0 54 3 1 #" "
0 0 54 3 1 #"0"
0 0 54 3 16 #"}) \"not a pair\")"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 8 #"test/exn"
0 0 54 3 14 #" (interp-expr "
0 0 54 3 1 #"`"
0 0 54 3 1 #"{"
0 0 54 3 3 #"snd"
0 0 54 3 2 #" {"
0 0 54 3 6 #"lambda"
0 0 54 3 2 #" {"
0 0 54 3 1 #"x"
0 0 54 3 2 #"} "
0 0 54 3 1 #"x"
0 0 54 3 17 #"}}) \"not a pair\")"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 8 #"test/exn"
0 0 54 3 14 #" (interp-expr "
0 0 54 3 1 #"`"
0 0 54 3 1 #"{"
0 0 54 3 1 #"1"
0 0 54 3 1 #" "
0 0 54 3 1 #"2"
0 0 54 3 20 #"}) \"not a function\")"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 8 #"test/exn"
0 0 54 3 14 #" (interp-expr "
0 0 54 3 1 #"`"
0 0 54 3 1 #"{"
0 0 54 3 6 #"letrec"
0 0 54 3 3 #" {["
0 0 54 3 1 #"x"
0 0 54 3 1 #" "
0 0 54 3 1 #"y"
0 0 54 3 3 #"]} "
0 0 54 3 1 #"x"
0 0 54 3 21 #"}) \"free identifier\")"
0 0 54 29 1 #"\n"
0 0 54 3 1 #"("
0 0 54 3 4 #"test"
0 0 54 3 14 #" (interp-expr "
0 0 54 3 1 #"`"
0 0 54 3 1 #"("
0 0 54 3 6 #"letrec"
0 0 54 3 3 #" (("
0 0 54 3 1 #"x"
0 0 54 3 1 #" "
0 0 54 3 1 #"x"
0 0 54 3 4 #")) ("
0 0 54 3 6 #"letrec"
0 0 54 3 3 #" (("
0 0 54 3 1 #"a"
0 0 54 3 1 #" "
0 0 54 3 1 #"b"
0 0 54 3 3 #")) "
0 0 54 3 1 #"x"
0 0 54 3 5 #"))) ("
0 0 54 3 8 #"undefV))"
0           0

#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.9 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 66 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 23 #"Source Code Pro Medium\0"
0 11 92 -1 90 -1 1 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 207 207 207 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 173 29 170 0 0 0 -1
-1 2 49 #"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 173 29 170 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 255 255 0 0 0 -1
-1 2 42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 255 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 65 65 65 -1 -1
0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 65 65 65 -1 -1 4
1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
26 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
29 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
50 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
51 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 1341 0 17 3 51
#"; Cours 04 : Les bo\303\256tes avec macro simplificatrice"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 29 3 6 #"#lang "
0 0 50 3 5 #"plait"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 9 #";;;;;;;;;"
0 0 50 29 1 #"\n"
0 0 50 3 9 #"; Macro ;"
0 0 50 29 1 #"\n"
0 0 50 3 9 #";;;;;;;;;"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 18 #"define-syntax-rule"
0 0 50 3 9 #" (with [("
0 0 50 3 4 #"v-id"
0 0 50 3 1 #" "
0 0 50 3 6 #"sto-id"
0 0 50 3 2 #") "
0 0 50 3 4 #"call"
0 0 50 3 2 #"] "
0 0 50 3 4 #"body"
0 0 50 3 1 #")"
0 0 50 29 1 #"\n"
0 0 50 3 3 #"  ("
0 0 50 3 9 #"type-case"
0 0 50 3 1 #" "
0 0 50 3 6 #"Result"
0 0 50 3 1 #" "
0 0 50 3 4 #"call"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"    [("
0 0 50 3 3 #"v*s"
0 0 50 3 1 #" "
0 0 50 3 4 #"v-id"
0 0 50 3 1 #" "
0 0 50 3 6 #"sto-id"
0 0 50 3 2 #") "
0 0 50 3 4 #"body"
0 0 50 3 3 #"]))"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 24 #";;;;;;;;;;;;;;;;;;;;;;;;"
0 0 50 29 1 #"\n"
0 0 50 3 25 #"; D\303\251finition des types ;"
0 0 50 29 1 #"\n"
0 0 50 3 24 #";;;;;;;;;;;;;;;;;;;;;;;;"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 33 #"; Repr\303\251sentation des expressions"
0 0 50 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 11 #"define-type"
0 0 50 3 4 #" Exp"
0 0 50 29 1 #"\n"
0 0 50 3 11 #"  [numE (n "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 6 #"Number"
0 0 50 3 2 #")]"
0 0 50 29 1 #"\n"
0 0 50 3 10 #"  [idE (s "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 6 #"Symbol"
0 0 50 3 2 #")]"
0 0 50 29 1 #"\n"
0 0 50 3 12 #"  [plusE (l "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 3 #"Exp"
0 0 50 3 5 #") (r "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 3 #"Exp"
0 0 50 3 2 #")]"
0 0 50 29 1 #"\n"
0 0 50 3 12 #"  [multE (l "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 3 #"Exp"
0 0 50 3 5 #") (r "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 3 #"Exp"
0 0 50 3 2 #")]"
0 0 50 29 1 #"\n"
0 0 50 3 9 #"  [lamE ("
0 0 51 3 3 #"par"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 6 #"Symbol"
0 0 50 3 3 #") ("
0 0 51 3 4 #"body"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 3 #"Exp"
0 0 50 3 2 #")]"
0 0 50 29 1 #"\n"
0 0 50 3 9 #"  [appE ("
0 0 51 3 3 #"fun"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 3 #"Exp"
0 0 50 3 3 #") ("
0 0 51 3 3 #"arg"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 3 #"Exp"
0 0 50 3 2 #")]"
0 0 50 29 1 #"\n"
0 0 50 3 11 #"  [letE (s "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 6 #"Symbol"
0 0 50 3 7 #") (rhs "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 3 #"Exp"
0 0 50 3 8 #") (body "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 3 #"Exp"
0 0 50 3 2 #")]"
0 0 50 29 1 #"\n"
0 0 50 3 13 #"  [boxE (val "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 3 #"Exp"
0 0 50 3 2 #")]"
0 0 50 29 1 #"\n"
0 0 50 3 13 #"  [unboxE (b "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 3 #"Exp"
0 0 50 3 2 #")]"
0 0 50 29 1 #"\n"
0 0 50 3 14 #"  [setboxE (b "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 3 #"Exp"
0 0 50 3 7 #") (val "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 3 #"Exp"
0 0 50 3 2 #")]"
0 0 50 29 1 #"\n"
0 0 50 3 13 #"  [beginE (l "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 3 #"Exp"
0 0 50 3 5 #") (r "
0 0 50 3 1 #":"
0 0 50 3 2 #" ("
0 0 50 3 6 #"Listof"
0 0 50 3 1 #" "
0 0 50 3 3 #"Exp"
0 0 50 3 4 #"))])"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 29 #"; Repr\303\251sentation des valeurs"
0 0 50 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 11 #"define-type"
0 0 50 3 6 #" Value"
0 0 50 29 1 #"\n"
0 0 50 3 11 #"  [numV (n "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 6 #"Number"
0 0 50 3 2 #")]"
0 0 50 29 1 #"\n"
0 0 50 3 10 #"  [closV ("
0 0 51 3 3 #"par"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 6 #"Symbol"
0 0 50 3 3 #") ("
0 0 51 3 4 #"body"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 3 #"Exp"
0 0 50 3 3 #") ("
0 0 51 3 3 #"env"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 3 #"Env"
0 0 50 3 2 #")]"
0 0 50 29 1 #"\n"
0 0 50 3 11 #"  [boxV (l "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 8 #"Location"
0 0 50 3 3 #")])"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 48
#"; Repr\303\251sentation du r\303\251sultat d'une \303\251valuation"
0 0 50 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 11 #"define-type"
0 0 50 3 7 #" Result"
0 0 50 29 1 #"\n"
0 0 50 3 10 #"  [v*s (v "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 5 #"Value"
0 0 50 3 5 #") (s "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 5 #"Store"
0 0 50 3 3 #")])"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 30 #"; Repr\303\251sentation des liaisons"
0 0 50 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 11 #"define-type"
0 0 50 3 8 #" Binding"
0 0 50 29 1 #"\n"
0 0 50 3 14 #"  [bind (name "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 6 #"Symbol"
0 0 50 3 7 #") (val "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 5 #"Value"
0 0 50 3 3 #")])"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 33 #"; Manipulation de l'environnement"
0 0 50 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 17 #"define-type-alias"
0 0 50 3 6 #" Env ("
0 0 50 3 6 #"Listof"
0 0 50 3 1 #" "
0 0 50 3 7 #"Binding"
0 0 50 3 2 #"))"
0 0 50 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 6 #"define"
0 0 50 3 14 #" mt-env empty)"
0 0 50 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 6 #"define"
0 0 50 3 17 #" extend-env cons)"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 39 #"; Repr\303\251sentation des adresses m\303\251moire"
0 0 50 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 17 #"define-type-alias"
0 0 50 3 10 #" Location "
0 0 50 3 6 #"Number"
0 0 50 3 1 #")"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 37 #"; Repr\303\251sentation d'un enregistrement"
0 0 50 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 11 #"define-type"
0 0 50 3 8 #" Storage"
0 0 50 29 1 #"\n"
0 0 50 3 18 #"  [cell (location "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 8 #"Location"
0 0 50 3 7 #") (val "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 5 #"Value"
0 0 50 3 3 #")])"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 29 #"; Manipulation de la m\303\251moire"
0 0 50 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 17 #"define-type-alias"
0 0 50 3 8 #" Store ("
0 0 50 3 6 #"Listof"
0 0 50 3 1 #" "
0 0 50 3 7 #"Storage"
0 0 50 3 2 #"))"
0 0 50 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 6 #"define"
0 0 50 3 16 #" mt-store empty)"
0 0 50 29 1 #"\n"
0 0 50 3 2 #"#;"
0 0 50 3 1 #"("
0 0 50 3 6 #"define"
0 0 50 3 2 #" ("
0 0 50 3 14 #"override-store"
0 0 50 3 1 #" "
0 0 50 3 1 #"x"
0 0 50 3 1 #" "
0 0 50 3 1 #"l"
0 0 50 3 1 #")"
0 0 50 29 1 #"\n"
0 0 50 3 5 #"    ("
0 0 50 3 4 #"cons"
0 0 50 3 1 #" "
0 0 50 3 1 #"x"
0 0 50 3 2 #" ("
0 0 50 3 6 #"filter"
0 0 50 3 2 #" ("
0 0 50 3 6 #"lambda"
0 0 50 3 2 #" ("
0 0 50 3 1 #"s"
0 0 50 3 3 #") ("
0 0 50 3 6 #"equal?"
0 0 50 3 1 #" "
0 0 50 3 1 #"x"
0 0 50 3 1 #" "
0 0 50 3 1 #"s"
0 0 50 3 3 #")) "
0 0 50 3 1 #"l"
0 0 50 3 3 #")))"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 6 #"define"
0 0 50 3 17 #" (override-store "
0 0 50 3 1 #"x"
0 0 50 3 1 #" "
0 0 50 3 1 #"l"
0 0 50 3 1 #")"
0 0 50 29 1 #"\n"
0 0 50 3 3 #"  ("
0 0 50 3 4 #"cond"
0 0 50 29 1 #"\n"
0 0 50 3 17 #"    [(empty? l) ("
0 0 50 3 4 #"cons"
0 0 50 3 6 #" x l)]"
0 0 50 29 1 #"\n"
0 0 50 3 47 #"    [(equal? (cell-location x) (cell-location ("
0 0 50 3 5 #"first"
0 0 50 3 25 #" l))) (override-store x ("
0 0 50 3 4 #"rest"
0 0 50 3 5 #" l))]"
0 0 50 29 1 #"\n"
0 0 50 3 5 #"    ["
0 0 50 3 4 #"else"
0 0 50 3 1 #" "
0 0 51 3 1 #"("
0 0 51 3 4 #"cons"
0 0 51 3 22 #" x (override-store x ("
0 0 51 3 4 #"rest"
0 0 51 3 5 #" l)))"
0 0 50 3 3 #"]))"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 22 #";;;;;;;;;;;;;;;;;;;;;;"
0 0 50 29 1 #"\n"
0 0 50 3 22 #"; Analyse syntaxique ;"
0 0 50 29 1 #"\n"
0 0 50 3 22 #";;;;;;;;;;;;;;;;;;;;;;"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 6 #"define"
0 0 50 3 9 #" (parse ["
0 0 50 3 1 #"s"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 5 #"S-Exp"
0 0 50 3 3 #"]) "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 3 #"Exp"
0 0 50 29 1 #"\n"
0 0 50 3 3 #"  ("
0 0 50 3 4 #"cond"
0 0 50 29 1 #"\n"
0 0 50 3 19 #"    [(s-exp-match? "
0 0 50 3 1 #"`"
0 0 50 3 6 #"NUMBER"
0 0 50 3 5 #" s) ("
0 0 50 3 4 #"numE"
0 0 50 3 20 #" (s-exp->number s))]"
0 0 50 29 1 #"\n"
0 0 50 3 19 #"    [(s-exp-match? "
0 0 50 3 1 #"`"
0 0 50 3 6 #"SYMBOL"
0 0 50 3 5 #" s) ("
0 0 50 3 3 #"idE"
0 0 50 3 20 #" (s-exp->symbol s))]"
0 0 50 29 1 #"\n"
0 0 50 3 19 #"    [(s-exp-match? "
0 0 50 3 1 #"`"
0 0 50 3 1 #"{"
0 0 50 3 1 #"+"
0 0 50 3 1 #" "
0 0 50 3 3 #"ANY"
0 0 50 3 1 #" "
0 0 50 3 3 #"ANY"
0 0 50 3 4 #"} s)"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"     ("
0 0 50 3 3 #"let"
0 0 50 3 23 #" ([sl (s-exp->list s)])"
0 0 50 29 1 #"\n"
0 0 50 3 8 #"       ("
0 0 50 3 5 #"plusE"
0 0 50 3 9 #" (parse ("
0 0 50 3 6 #"second"
0 0 50 3 14 #" sl)) (parse ("
0 0 50 3 5 #"third"
0 0 50 3 8 #" sl))))]"
0 0 50 29 1 #"\n"
0 0 50 3 19 #"    [(s-exp-match? "
0 0 50 3 1 #"`"
0 0 50 3 1 #"{"
0 0 50 3 1 #"*"
0 0 50 3 1 #" "
0 0 50 3 3 #"ANY"
0 0 50 3 1 #" "
0 0 50 3 3 #"ANY"
0 0 50 3 4 #"} s)"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"     ("
0 0 50 3 3 #"let"
0 0 50 3 23 #" ([sl (s-exp->list s)])"
0 0 50 29 1 #"\n"
0 0 50 3 8 #"       ("
0 0 50 3 5 #"multE"
0 0 50 3 9 #" (parse ("
0 0 50 3 6 #"second"
0 0 50 3 14 #" sl)) (parse ("
0 0 50 3 5 #"third"
0 0 50 3 8 #" sl))))]"
0 0 50 29 1 #"\n"
0 0 50 3 19 #"    [(s-exp-match? "
0 0 50 3 1 #"`"
0 0 50 3 1 #"{"
0 0 50 3 6 #"lambda"
0 0 50 3 2 #" {"
0 0 50 3 6 #"SYMBOL"
0 0 50 3 2 #"} "
0 0 50 3 3 #"ANY"
0 0 50 3 4 #"} s)"
0 0 50 29 1 #"\n"
0 0 50 3 5 #"     "
0 0 51 3 1 #"("
0 0 51 3 3 #"let"
0 0 51 3 23 #" ([sl (s-exp->list s)])"
0 0 51 29 1 #"\n"
0 0 51 3 8 #"       ("
0 0 51 3 4 #"lamE"
0 0 51 3 17 #" (s-exp->symbol ("
0 0 51 3 5 #"first"
0 0 51 3 15 #" (s-exp->list ("
0 0 51 3 6 #"second"
0 0 51 3 16 #" sl)))) (parse ("
0 0 51 3 5 #"third"
0 0 51 3 7 #" sl))))"
0 0 50 3 1 #"]"
0 0 50 29 1 #"\n"
0 0 50 3 19 #"    [(s-exp-match? "
0 0 50 3 1 #"`"
0 0 50 3 1 #"{"
0 0 50 3 3 #"let"
0 0 50 3 3 #" [{"
0 0 50 3 6 #"SYMBOL"
0 0 50 3 1 #" "
0 0 50 3 3 #"ANY"
0 0 50 3 3 #"}] "
0 0 50 3 3 #"ANY"
0 0 50 3 4 #"} s)"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"     ("
0 0 50 3 3 #"let"
0 0 50 3 23 #" ([sl (s-exp->list s)])"
0 0 50 29 1 #"\n"
0 0 50 3 8 #"       ("
0 0 50 3 3 #"let"
0 0 50 3 23 #" ([subst (s-exp->list ("
0 0 50 3 5 #"first"
0 0 50 3 15 #" (s-exp->list ("
0 0 50 3 6 #"second"
0 0 50 3 9 #" sl))))])"
0 0 50 29 1 #"\n"
0 0 50 3 10 #"         ("
0 0 50 3 4 #"letE"
0 0 50 3 17 #" (s-exp->symbol ("
0 0 50 3 5 #"first"
0 0 50 3 8 #" subst))"
0 0 50 29 1 #"\n"
0 0 50 3 23 #"               (parse ("
0 0 50 3 6 #"second"
0 0 50 3 8 #" subst))"
0 0 50 29 1 #"\n"
0 0 50 3 23 #"               (parse ("
0 0 50 3 5 #"third"
0 0 50 3 9 #" sl)))))]"
0 0 50 29 1 #"\n"
0 0 50 3 19 #"    [(s-exp-match? "
0 0 50 3 1 #"`"
0 0 50 3 1 #"{"
0 0 50 3 3 #"box"
0 0 50 3 1 #" "
0 0 50 3 3 #"ANY"
0 0 50 3 4 #"} s)"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"     ("
0 0 50 3 3 #"let"
0 0 50 3 23 #" ([sl (s-exp->list s)])"
0 0 50 29 1 #"\n"
0 0 50 3 8 #"       ("
0 0 50 3 4 #"boxE"
0 0 50 3 9 #" (parse ("
0 0 50 3 6 #"second"
0 0 50 3 8 #" sl))))]"
0 0 50 29 1 #"\n"
0 0 50 3 19 #"    [(s-exp-match? "
0 0 50 3 1 #"`"
0 0 50 3 1 #"{"
0 0 50 3 5 #"unbox"
0 0 50 3 1 #" "
0 0 50 3 3 #"ANY"
0 0 50 3 4 #"} s)"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"     ("
0 0 50 3 3 #"let"
0 0 50 3 23 #" ([sl (s-exp->list s)])"
0 0 50 29 1 #"\n"
0 0 50 3 8 #"       ("
0 0 50 3 6 #"unboxE"
0 0 50 3 9 #" (parse ("
0 0 50 3 6 #"second"
0 0 50 3 8 #" sl))))]"
0 0 50 29 1 #"\n"
0 0 50 3 19 #"    [(s-exp-match? "
0 0 50 3 1 #"`"
0 0 50 3 1 #"{"
0 0 50 3 8 #"set-box!"
0 0 50 3 1 #" "
0 0 50 3 3 #"ANY"
0 0 50 3 1 #" "
0 0 50 3 3 #"ANY"
0 0 50 3 4 #"} s)"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"     ("
0 0 50 3 3 #"let"
0 0 50 3 23 #" ([sl (s-exp->list s)])"
0 0 50 29 1 #"\n"
0 0 50 3 8 #"       ("
0 0 50 3 7 #"setboxE"
0 0 50 3 9 #" (parse ("
0 0 50 3 6 #"second"
0 0 50 3 14 #" sl)) (parse ("
0 0 50 3 5 #"third"
0 0 50 3 8 #" sl))))]"
0 0 50 29 1 #"\n"
0 0 50 3 19 #"    [(s-exp-match? "
0 0 50 3 1 #"`"
0 0 50 3 1 #"{"
0 0 50 3 5 #"begin"
0 0 50 3 1 #" "
0 0 50 3 3 #"ANY"
0 0 50 3 1 #" "
0 0 50 3 3 #"ANY"
0 0 50 3 1 #" "
0 0 50 3 3 #"..."
0 0 50 3 4 #"} s)"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"     ("
0 0 50 3 3 #"let"
0 0 50 3 23 #" ([sl (s-exp->list s)])"
0 0 50 29 1 #"\n"
0 0 50 3 8 #"       ("
0 0 50 3 3 #"let"
0 0 50 3 11 #" [(mapped ("
0 0 50 3 3 #"map"
0 0 50 3 8 #" parse ("
0 0 50 3 4 #"rest"
0 0 50 3 7 #" sl)))]"
0 0 50 29 1 #"\n"
0 0 50 3 10 #"         ("
0 0 50 3 6 #"beginE"
0 0 50 3 2 #" ("
0 0 50 3 5 #"first"
0 0 50 3 10 #" mapped) ("
0 0 50 3 4 #"rest"
0 0 50 3 12 #" mapped))))]"
0 0 50 29 1 #"\n"
0 0 50 3 5 #"    ["
0 0 51 3 14 #"(s-exp-match? "
0 0 51 3 1 #"`"
0 0 51 3 1 #"{"
0 0 51 3 3 #"ANY"
0 0 51 3 1 #" "
0 0 51 3 3 #"ANY"
0 0 51 3 4 #"} s)"
0 0 50 29 1 #"\n"
0 0 50 3 5 #"     "
0 0 51 3 1 #"("
0 0 51 3 3 #"let"
0 0 51 3 23 #" ([sl (s-exp->list s)])"
0 0 51 29 1 #"\n"
0 0 51 3 8 #"       ("
0 0 51 3 4 #"appE"
0 0 51 3 9 #" (parse ("
0 0 51 3 5 #"first"
0 0 51 3 14 #" sl)) (parse ("
0 0 51 3 6 #"second"
0 0 51 3 7 #" sl))))"
0 0 50 3 1 #"]"
0 0 50 29 1 #"\n"
0 0 50 3 5 #"    ["
0 0 50 3 4 #"else"
0 0 50 3 1 #" "
0 0 51 3 7 #"(error "
0 0 51 3 1 #"'"
0 0 51 3 5 #"parse"
0 0 51 3 17 #" \"invalid input\")"
0 0 50 3 3 #"]))"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 18 #";;;;;;;;;;;;;;;;;;"
0 0 50 29 1 #"\n"
0 0 50 3 19 #"; Interpr\303\251tation ;"
0 0 50 29 1 #"\n"
0 0 50 3 18 #";;;;;;;;;;;;;;;;;;"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 15 #"; Interpr\303\251teur"
0 0 50 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 6 #"define"
0 0 50 3 10 #" (interp ["
0 0 50 3 1 #"e"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 3 #"Exp"
0 0 50 3 3 #"] ["
0 0 50 3 3 #"env"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 3 #"Env"
0 0 50 3 3 #"] ["
0 0 50 3 3 #"sto"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 5 #"Store"
0 0 50 3 3 #"]) "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 6 #"Result"
0 0 50 29 1 #"\n"
0 0 50 3 3 #"  ("
0 0 50 3 9 #"type-case"
0 0 50 3 1 #" "
0 0 50 3 3 #"Exp"
0 0 50 3 2 #" e"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"    [("
0 0 50 3 4 #"numE"
0 0 50 3 5 #" n) ("
0 0 50 3 3 #"v*s"
0 0 50 3 2 #" ("
0 0 50 3 4 #"numV"
0 0 50 3 9 #" n) sto)]"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"    [("
0 0 50 3 3 #"idE"
0 0 50 3 5 #" s) ("
0 0 50 3 3 #"v*s"
0 0 50 3 21 #" (lookup s env) sto)]"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"    [("
0 0 50 3 5 #"plusE"
0 0 50 3 5 #" l r)"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"     ("
0 0 50 3 4 #"with"
0 0 50 3 33 #" [(v-l sto-l) (interp l env sto)]"
0 0 50 29 1 #"\n"
0 0 50 3 12 #"           ("
0 0 50 3 4 #"with"
0 0 50 3 35 #" [(v-r sto-r) (interp r env sto-l)]"
0 0 50 29 1 #"\n"
0 0 50 3 18 #"                 ("
0 0 50 3 3 #"v*s"
0 0 50 3 25 #" (num+ v-l v-r) sto-r)))]"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"    [("
0 0 50 3 5 #"multE"
0 0 50 3 5 #" l r)"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"     ("
0 0 50 3 4 #"with"
0 0 50 3 33 #" [(v-l sto-l) (interp l env sto)]"
0 0 50 29 1 #"\n"
0 0 50 3 12 #"           ("
0 0 50 3 4 #"with"
0 0 50 3 35 #" [(v-r sto-r) (interp r env sto-l)]"
0 0 50 29 1 #"\n"
0 0 50 3 18 #"                 ("
0 0 50 3 3 #"v*s"
0 0 50 3 25 #" (num* v-l v-r) sto-r)))]"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"    [("
0 0 50 3 4 #"lamE"
0 0 50 3 1 #" "
0 0 51 3 3 #"par"
0 0 50 3 1 #" "
0 0 51 3 4 #"body"
0 0 50 3 2 #") "
0 0 51 3 1 #"("
0 0 51 3 3 #"v*s"
0 0 51 3 2 #" ("
0 0 51 3 5 #"closV"
0 0 51 3 19 #" par body env) sto)"
0 0 50 3 1 #"]"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"    [("
0 0 50 3 4 #"appE"
0 0 50 3 1 #" "
0 0 51 3 1 #"f"
0 0 50 3 1 #" "
0 0 51 3 3 #"arg"
0 0 50 3 1 #")"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"     ("
0 0 50 3 4 #"with"
0 0 50 3 3 #" [("
0 0 51 3 3 #"v-f"
0 0 50 3 1 #" "
0 0 51 3 5 #"sto-f"
0 0 50 3 2 #") "
0 0 51 3 18 #"(interp f env sto)"
0 0 50 3 1 #"]"
0 0 50 29 1 #"\n"
0 0 50 3 12 #"           ("
0 0 50 3 9 #"type-case"
0 0 50 3 1 #" "
0 0 50 3 5 #"Value"
0 0 50 3 1 #" "
0 0 51 3 3 #"v-f"
0 0 50 29 1 #"\n"
0 0 50 3 15 #"             [("
0 0 50 3 5 #"closV"
0 0 50 3 1 #" "
0 0 51 3 3 #"par"
0 0 50 3 1 #" "
0 0 51 3 4 #"body"
0 0 50 3 1 #" "
0 0 51 3 5 #"c-env"
0 0 50 3 1 #")"
0 0 50 29 1 #"\n"
0 0 50 3 15 #"              ("
0 0 50 3 4 #"with"
0 0 50 3 3 #" [("
0 0 51 3 5 #"v-arg"
0 0 50 3 1 #" "
0 0 51 3 7 #"sto-arg"
0 0 50 3 2 #") "
0 0 51 3 22 #"(interp arg env sto-f)"
0 0 50 3 1 #"]"
0 0 50 29 1 #"\n"
0 0 50 3 20 #"                    "
0 0 51 3 26 #"(interp body (extend-env ("
0 0 51 3 4 #"bind"
0 0 51 3 27 #" par v-arg) c-env) sto-arg)"
0 0 50 3 2 #")]"
0 0 50 29 1 #"\n"
0 0 50 3 14 #"             ["
0 0 50 3 4 #"else"
0 0 50 3 1 #" "
0 0 51 3 7 #"(error "
0 0 51 3 1 #"'"
0 0 51 3 6 #"interp"
0 0 51 3 18 #" \"not a function\")"
0 0 50 3 4 #"]))]"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"    [("
0 0 50 3 4 #"letE"
0 0 50 3 12 #" s rhs body)"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"     ("
0 0 50 3 4 #"with"
0 0 50 3 39 #" [(v-rhs sto-rhs) (interp rhs env sto)]"
0 0 50 29 1 #"\n"
0 0 50 3 37 #"           (interp body (extend-env ("
0 0 50 3 4 #"bind"
0 0 50 3 25 #" s v-rhs) env) sto-rhs))]"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"    [("
0 0 50 3 4 #"boxE"
0 0 50 3 5 #" val)"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"     ("
0 0 50 3 4 #"with"
0 0 50 3 39 #" [(v-val sto-val) (interp val env sto)]"
0 0 50 29 1 #"\n"
0 0 50 3 12 #"           ("
0 0 50 3 3 #"let"
0 0 50 3 24 #" ([l (new-loc sto-val)])"
0 0 50 29 1 #"\n"
0 0 50 3 14 #"             ("
0 0 50 3 3 #"v*s"
0 0 50 3 2 #" ("
0 0 50 3 4 #"boxV"
0 0 50 3 21 #" l) (override-store ("
0 0 50 3 4 #"cell"
0 0 50 3 22 #" l v-val) sto-val))))]"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"    [("
0 0 50 3 6 #"unboxE"
0 0 50 3 3 #" b)"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"     ("
0 0 50 3 4 #"with"
0 0 50 3 33 #" [(v-b sto-b) (interp b env sto)]"
0 0 50 29 1 #"\n"
0 0 50 3 12 #"           ("
0 0 50 3 9 #"type-case"
0 0 50 3 1 #" "
0 0 50 3 5 #"Value"
0 0 50 3 4 #" v-b"
0 0 50 29 1 #"\n"
0 0 50 3 15 #"             [("
0 0 50 3 4 #"boxV"
0 0 50 3 5 #" l) ("
0 0 50 3 3 #"v*s"
0 0 50 3 24 #" (fetch l sto-b) sto-b)]"
0 0 50 29 1 #"\n"
0 0 50 3 14 #"             ["
0 0 50 3 4 #"else"
0 0 50 3 1 #" "
0 0 51 3 7 #"(error "
0 0 51 3 1 #"'"
0 0 51 3 6 #"interp"
0 0 51 3 13 #" \"not a box\")"
0 0 50 3 4 #"]))]"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"    [("
0 0 50 3 7 #"setboxE"
0 0 50 3 7 #" b val)"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"     ("
0 0 50 3 4 #"with"
0 0 50 3 33 #" [(v-b sto-b) (interp b env sto)]"
0 0 50 29 1 #"\n"
0 0 50 3 12 #"           ("
0 0 50 3 9 #"type-case"
0 0 50 3 1 #" "
0 0 50 3 5 #"Value"
0 0 50 3 4 #" v-b"
0 0 50 29 1 #"\n"
0 0 50 3 15 #"             [("
0 0 50 3 4 #"boxV"
0 0 50 3 3 #" l)"
0 0 50 29 1 #"\n"
0 0 50 3 15 #"              ("
0 0 50 3 4 #"with"
0 0 50 3 41 #" [(v-val sto-val) (interp val env sto-b)]"
0 0 50 29 1 #"\n"
0 0 50 3 21 #"                    ("
0 0 50 3 3 #"v*s"
0 0 50 3 24 #" v-val (override-store ("
0 0 50 3 4 #"cell"
0 0 50 3 21 #" l v-val) sto-val)))]"
0 0 50 29 1 #"\n"
0 0 50 3 14 #"             ["
0 0 50 3 4 #"else"
0 0 50 3 1 #" "
0 0 51 3 7 #"(error "
0 0 51 3 1 #"'"
0 0 51 3 6 #"interp"
0 0 51 3 13 #" \"not a box\")"
0 0 50 3 4 #"]))]"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"    [("
0 0 50 3 6 #"beginE"
0 0 50 3 21 #" l r) (begin-eval l ("
0 0 50 3 3 #"v*s"
0 0 50 3 2 #" ("
0 0 50 3 4 #"numV"
0 0 50 3 22 #" 0) sto) env r sto)]))"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 6 #"define"
0 0 50 3 13 #" (begin-eval "
0 0 50 3 7 #"old-val"
0 0 50 3 1 #" "
0 0 50 3 3 #"acc"
0 0 50 3 1 #" "
0 0 50 3 3 #"env"
0 0 50 3 1 #" "
0 0 50 3 4 #"args"
0 0 50 3 1 #" "
0 0 50 3 9 #"sto-inner"
0 0 50 3 1 #")"
0 0 50 29 1 #"\n"
0 0 50 3 3 #"  ("
0 0 50 3 2 #"if"
0 0 50 3 14 #" (empty? args)"
0 0 50 29 1 #"\n"
0 0 50 3 10 #"      acc "
0 0 50 29 1 #"\n"
0 0 50 3 7 #"      ("
0 0 50 3 4 #"with"
0 0 50 3 45 #" [(v-l sto-b) (interp old-val env sto-inner)]"
0 0 50 29 1 #"\n"
0 0 50 3 25 #"            (begin-eval ("
0 0 50 3 5 #"first"
0 0 50 3 8 #" args) ("
0 0 50 3 3 #"v*s"
0 0 50 3 17 #" (v*s-v (interp ("
0 0 50 3 5 #"first"
0 0 50 3 31 #" args) env sto-b)) sto-b) env ("
0 0 50 3 4 #"rest"
0 0 50 3 16 #" args) sto-b))))"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 44 #"; Fonctions utilitaires pour l'arithm\303\251tique"
0 0 50 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 6 #"define"
0 0 50 3 10 #" (num-op ["
0 0 50 3 2 #"op"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 2 #" ("
0 0 50 3 6 #"Number"
0 0 50 3 1 #" "
0 0 50 3 6 #"Number"
0 0 50 3 1 #" "
0 0 50 3 2 #"->"
0 0 50 3 1 #" "
0 0 50 3 6 #"Number"
0 0 50 3 2 #")]"
0 0 50 29 1 #"\n"
0 0 50 3 17 #"                ["
0 0 50 3 1 #"l"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 5 #"Value"
0 0 50 3 3 #"] ["
0 0 50 3 1 #"r"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 5 #"Value"
0 0 50 3 3 #"]) "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 5 #"Value"
0 0 50 29 1 #"\n"
0 0 50 3 3 #"  ("
0 0 50 3 2 #"if"
0 0 50 3 2 #" ("
0 0 50 3 3 #"and"
0 0 50 3 21 #" (numV? l) (numV? r))"
0 0 50 29 1 #"\n"
0 0 50 3 7 #"      ("
0 0 50 3 4 #"numV"
0 0 50 3 28 #" (op (numV-n l) (numV-n r)))"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"      "
0 0 51 3 7 #"(error "
0 0 51 3 1 #"'"
0 0 51 3 6 #"interp"
0 0 51 3 16 #" \"not a number\")"
0 0 50 3 2 #"))"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 6 #"define"
0 0 50 3 8 #" (num+ ["
0 0 50 3 1 #"l"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 5 #"Value"
0 0 50 3 3 #"] ["
0 0 50 3 1 #"r"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 5 #"Value"
0 0 50 3 3 #"]) "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 5 #"Value"
0 0 50 29 1 #"\n"
0 0 50 3 17 #"  (num-op + l r))"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 6 #"define"
0 0 50 3 8 #" (num* ["
0 0 50 3 1 #"l"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 5 #"Value"
0 0 50 3 3 #"] ["
0 0 50 3 1 #"r"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 5 #"Value"
0 0 50 3 3 #"]) "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 5 #"Value"
0 0 50 29 1 #"\n"
0 0 50 3 17 #"  (num-op * l r))"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 52 #"; Recherche d'un identificateur dans l'environnement"
0 0 50 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 6 #"define"
0 0 50 3 10 #" (lookup ["
0 0 50 3 1 #"n"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 6 #"Symbol"
0 0 50 3 3 #"] ["
0 0 50 3 3 #"env"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 3 #"Env"
0 0 50 3 3 #"]) "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 5 #"Value"
0 0 50 29 1 #"\n"
0 0 50 3 3 #"  ("
0 0 50 3 4 #"cond"
0 0 50 29 1 #"\n"
0 0 50 3 18 #"    [(empty? env) "
0 0 51 3 7 #"(error "
0 0 51 3 1 #"'"
0 0 51 3 6 #"lookup"
0 0 51 3 19 #" \"free identifier\")"
0 0 50 3 1 #"]"
0 0 50 29 1 #"\n"
0 0 50 3 27 #"    [(equal? n (bind-name ("
0 0 50 3 5 #"first"
0 0 50 3 19 #" env))) (bind-val ("
0 0 50 3 5 #"first"
0 0 50 3 7 #" env))]"
0 0 50 29 1 #"\n"
0 0 50 3 5 #"    ["
0 0 50 3 4 #"else"
0 0 50 3 1 #" "
0 0 51 3 11 #"(lookup n ("
0 0 51 3 4 #"rest"
0 0 51 3 6 #" env))"
0 0 50 3 3 #"]))"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 36 #"; Renvoie une adresse m\303\251moire libre"
0 0 50 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 6 #"define"
0 0 50 3 11 #" (new-loc ["
0 0 50 3 3 #"sto"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 5 #"Store"
0 0 50 3 3 #"]) "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 8 #"Location"
0 0 50 29 1 #"\n"
0 0 50 3 26 #"  (+ (max-address sto) 1))"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 45 #"; Le maximum des adresses m\303\251moires utilis\303\251s"
0 0 50 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 6 #"define"
0 0 50 3 15 #" (max-address ["
0 0 50 3 3 #"sto"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 5 #"Store"
0 0 50 3 3 #"]) "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 8 #"Location"
0 0 50 29 1 #"\n"
0 0 50 3 3 #"  ("
0 0 50 3 2 #"if"
0 0 50 3 13 #" (empty? sto)"
0 0 50 29 1 #"\n"
0 0 50 3 7 #"      0"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"      "
0 0 51 3 21 #"(max (cell-location ("
0 0 51 3 5 #"first"
0 0 51 3 21 #" sto)) (max-address ("
0 0 51 3 4 #"rest"
0 0 51 3 7 #" sto)))"
0 0 50 3 2 #"))"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 35 #"; Acc\303\250s \303\240 un emplacement m\303\251moire"
0 0 50 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 6 #"define"
0 0 50 3 9 #" (fetch ["
0 0 50 3 1 #"l"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 8 #"Location"
0 0 50 3 3 #"] ["
0 0 50 3 3 #"sto"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 5 #"Store"
0 0 50 3 3 #"]) "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 5 #"Value"
0 0 50 29 1 #"\n"
0 0 50 3 3 #"  ("
0 0 50 3 4 #"cond"
0 0 50 29 1 #"\n"
0 0 50 3 18 #"    [(empty? sto) "
0 0 51 3 7 #"(error "
0 0 51 3 1 #"'"
0 0 51 3 6 #"interp"
0 0 51 3 22 #" \"segmentation fault\")"
0 0 50 3 1 #"]"
0 0 50 29 1 #"\n"
0 0 50 3 31 #"    [(equal? l (cell-location ("
0 0 50 3 5 #"first"
0 0 50 3 19 #" sto))) (cell-val ("
0 0 50 3 5 #"first"
0 0 50 3 7 #" sto))]"
0 0 50 29 1 #"\n"
0 0 50 3 5 #"    ["
0 0 50 3 4 #"else"
0 0 50 3 1 #" "
0 0 51 3 10 #"(fetch l ("
0 0 51 3 4 #"rest"
0 0 51 3 6 #" sto))"
0 0 50 3 3 #"]))"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 9 #";;;;;;;;;"
0 0 50 29 1 #"\n"
0 0 50 3 9 #"; Tests ;"
0 0 50 29 1 #"\n"
0 0 50 3 9 #";;;;;;;;;"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 6 #"define"
0 0 50 3 15 #" (interp-expr ["
0 0 50 3 1 #"e"
0 0 50 3 1 #" "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 5 #"S-Exp"
0 0 50 3 3 #"]) "
0 0 50 3 1 #":"
0 0 50 3 1 #" "
0 0 50 3 5 #"Value"
0 0 50 29 1 #"\n"
0 0 50 3 45 #"  (v*s-v (interp (parse e) mt-env mt-store)))"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 2 #"( "
0 0 50 3 4 #"test"
0 0 50 3 18 #" ( interp ( parse "
0 0 50 3 1 #"`"
0 0 50 3 2 #"{ "
0 0 50 3 8 #"set-box!"
0 0 50 3 3 #" { "
0 0 50 3 3 #"box"
0 0 50 3 1 #" "
0 0 50 3 1 #"2"
0 0 50 3 2 #"} "
0 0 50 3 1 #"3"
0 0 50 3 20 #"}) mt-env mt-store )"
0 0 50 29 1 #"\n"
0 0 50 3 8 #"       ("
0 0 50 3 3 #"v*s"
0 0 50 3 3 #" ( "
0 0 50 3 4 #"numV"
0 0 50 3 6 #" 3) ( "
0 0 50 3 4 #"list"
0 0 50 3 3 #" ( "
0 0 50 3 4 #"cell"
0 0 50 3 5 #" 1 ( "
0 0 50 3 4 #"numV"
0 0 50 3 7 #" 3)) ( "
0 0 50 3 4 #"cell"
0 0 50 3 5 #" 1 ( "
0 0 50 3 4 #"numV"
0 0 50 3 7 #" 2)))))"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 2 #"( "
0 0 50 3 4 #"test"
0 0 50 3 18 #" ( interp ( parse "
0 0 50 3 1 #"`"
0 0 50 3 2 #"{ "
0 0 50 3 8 #"set-box!"
0 0 50 3 3 #" { "
0 0 50 3 3 #"box"
0 0 50 3 1 #" "
0 0 50 3 1 #"2"
0 0 50 3 2 #"} "
0 0 50 3 1 #"3"
0 0 50 3 20 #"}) mt-env mt-store )"
0 0 50 29 1 #"\n"
0 0 50 3 8 #"       ("
0 0 50 3 3 #"v*s"
0 0 50 3 3 #" ( "
0 0 50 3 4 #"numV"
0 0 50 3 6 #" 3) ( "
0 0 50 3 4 #"list"
0 0 50 3 3 #" ( "
0 0 50 3 4 #"cell"
0 0 50 3 5 #" 1 ( "
0 0 50 3 4 #"numV"
0 0 50 3 7 #" 3)))))"
0 0 50 29 1 #"\n"
0 0 50 3 2 #"( "
0 0 50 3 4 #"test"
0 0 50 3 15 #" ( interp-expr "
0 0 50 3 1 #"`"
0 0 50 3 2 #"{ "
0 0 50 3 3 #"let"
0 0 50 3 3 #" {["
0 0 50 3 1 #"b"
0 0 50 3 3 #" { "
0 0 50 3 3 #"box"
0 0 50 3 1 #" "
0 0 50 3 1 #"0"
0 0 50 3 3 #"}]}"
0 0 50 29 1 #"\n"
0 0 50 3 27 #"                         { "
0 0 50 3 5 #"begin"
0 0 50 29 1 #"\n"
0 0 50 3 30 #"                            { "
0 0 50 3 8 #"set-box!"
0 0 50 3 1 #" "
0 0 50 3 1 #"b"
0 0 50 3 2 #" {"
0 0 50 3 1 #"+"
0 0 50 3 1 #" "
0 0 50 3 1 #"1"
0 0 50 3 3 #" { "
0 0 50 3 5 #"unbox"
0 0 50 3 1 #" "
0 0 50 3 1 #"b"
0 0 50 3 5 #"} } }"
0 0 50 29 1 #"\n"
0 0 50 3 30 #"                            { "
0 0 50 3 8 #"set-box!"
0 0 50 3 1 #" "
0 0 50 3 1 #"b"
0 0 50 3 2 #" {"
0 0 50 3 1 #"*"
0 0 50 3 1 #" "
0 0 50 3 1 #"2"
0 0 50 3 3 #" { "
0 0 50 3 5 #"unbox"
0 0 50 3 1 #" "
0 0 50 3 1 #"b"
0 0 50 3 5 #"} } }"
0 0 50 29 1 #"\n"
0 0 50 3 30 #"                            { "
0 0 50 3 8 #"set-box!"
0 0 50 3 1 #" "
0 0 50 3 1 #"b"
0 0 50 3 2 #" {"
0 0 50 3 1 #"+"
0 0 50 3 1 #" "
0 0 50 3 1 #"3"
0 0 50 3 3 #" { "
0 0 50 3 5 #"unbox"
0 0 50 3 1 #" "
0 0 50 3 1 #"b"
0 0 50 3 5 #"} } }"
0 0 50 29 1 #"\n"
0 0 50 3 30 #"                            { "
0 0 50 3 8 #"set-box!"
0 0 50 3 1 #" "
0 0 50 3 1 #"b"
0 0 50 3 2 #" {"
0 0 50 3 1 #"+"
0 0 50 3 1 #" "
0 0 50 3 1 #"8"
0 0 50 3 3 #" { "
0 0 50 3 5 #"unbox"
0 0 50 3 1 #" "
0 0 50 3 1 #"b"
0 0 50 3 5 #"} } }"
0 0 50 29 1 #"\n"
0 0 50 3 30 #"                            { "
0 0 50 3 8 #"set-box!"
0 0 50 3 1 #" "
0 0 50 3 1 #"b"
0 0 50 3 2 #" {"
0 0 50 3 1 #"*"
0 0 50 3 1 #" "
0 0 50 3 1 #"3"
0 0 50 3 3 #" { "
0 0 50 3 5 #"unbox"
0 0 50 3 1 #" "
0 0 50 3 1 #"b"
0 0 50 3 8 #"} } }}})"
0 0 50 29 1 #"\n"
0 0 50 3 9 #"       ( "
0 0 50 3 4 #"numV"
0 0 50 3 5 #" 39))"
0 0 50 29 1 #"\n"
0           0
